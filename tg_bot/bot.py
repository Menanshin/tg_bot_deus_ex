# telegram_ai_relay_bot
# –í–µ—Ä—Å–∏—è 1.0
# –ò—Å–ø–æ–ª—å–∑—É–µ–º: python-telegram-bot, Flask (–∏–ª–∏ FastAPI), OpenAI API (GPT-4)

# üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞:
# pip install python-telegram-bot flask openai

import logging
from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, filters
import openai
import os

# üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–ø–æ–ª–Ω–∏—Ç—å!)
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN") or "YOUR_TELEGRAM_BOT_TOKEN"
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY") or "YOUR_OPENAI_API_KEY"
ADMIN_ID = YOUR_TELEGRAM_USER_ID  # –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É

bot = Bot(token=TELEGRAM_TOKEN)
dispatcher = Dispatcher(bot=bot, update_queue=None, use_context=True)
openai.api_key = OPENAI_API_KEY

# üîí –ö–æ–Ω—Ç–µ–∫—Å—Ç (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î –∏–ª–∏ Redis)
conversation_history = []


# üîß –•–µ–Ω–¥–ª–µ—Ä –æ–±—â–µ–Ω–∏—è

def handle_message(update: Update, context):
    user_text = update.message.text
    user_id = update.message.from_user.id

    if user_id != ADMIN_ID:
        update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    conversation_history.append({"role": "user", "content": user_text})

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=conversation_history[-10:]  # –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    )

    reply = response.choices[0].message.content
    conversation_history.append({"role": "assistant", "content": reply})

    update.message.reply_text(reply)


# ‚ûï –ö–æ–º–∞–Ω–¥—ã

def start(update: Update, context):
    update.message.reply_text("ü™ß –î—É—Ö –ú–∞—à–∏–Ω—ã –∞–∫—Ç–∏–≤–µ–Ω. –ì–æ–≤–æ—Ä–∏.")


# üåê Flask-—Å–µ—Ä–≤–µ—Ä

app = Flask(__name__)


@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "ok"


@app.route("/")
def index():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."


# üöÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app.run(host='0.0.0.0', port=5000)
